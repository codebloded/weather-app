{"version":3,"sources":["Weather.jsx","App.jsx","index.jsx"],"names":["Weather","props","Fragment","className","name2","name1","weatherx","temp","x","y","z","m","App","useState","city","setCity","country","setCountry","cityx","countryx","updatedLoc","setUpdateLoc","maxTemp","setMaxTemp","minTemp","setMinTemp","dec","setDec","Temp","setTemp","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","weather","icons","setIcons","useEffect","fetch","then","res","json","data","console","log","main","Math","floor","temp_max","temp_min","description","getIcon","onSubmit","e","preventDefault","type","placeholder","onChange","target","value","defaultValue","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gQA2BeA,G,WAxBC,SAACC,GACb,OACI,kBAAC,IAAMC,SAAP,KACI,yBAAKC,UAAU,QACX,6BACA,4BAAKF,EAAMG,MAAX,KAAoBH,EAAMI,QAE1B,4BACI,uBAAGF,UAAWF,EAAMK,YAExB,6BACI,4BAAKL,EAAMM,KAAKC,EAAhB,UAEJ,yBAAKL,UAAU,WAC3B,4BAAKF,EAAMM,KAAKE,EAAhB,SACA,4BAAKR,EAAMM,KAAKG,EAAhB,UAEY,4BAAKT,EAAMM,KAAKI,EAAhB,SCuGDC,G,MAlHH,WAAO,IAAD,EACQC,mBAAS,SADjB,mBACTC,EADS,KACHC,EADG,OAEcF,mBAAS,SAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGmBJ,mBAAS,CAAEK,MAAOJ,EAAMK,SAAUH,IAHrD,mBAGTI,EAHS,KAGGC,EAHH,OAIcR,mBAAS,OAJvB,mBAITS,EAJS,KAIAC,EAJA,OAKcV,mBAAS,OALvB,mBAKTW,EALS,KAKAC,EALA,OAMMZ,qBANN,mBAMTa,EANS,KAMJC,EANI,OAOQd,qBAPR,mBAOTe,EAPS,KAOHC,EAPG,OAQchB,mBAAS,CACrCiB,aAAc,qBACdC,QAAS,cACTC,KAAM,sBACNC,KAAM,aACNC,WAAY,YACZC,MAAO,kBACPC,OAAQ,kBAfM,mBAQTC,EARS,aAkBUxB,sBAlBV,mBAkBTyB,EAlBS,KAkBFC,EAlBE,KAqBhBC,qBAAU,WACPC,MAAM,qDAAD,OAA4DzB,EAA5D,kBAxBM,qCAyBT0B,MAAK,SAACC,GACL,OAAOA,EAAIC,UACVF,MAAK,SAACG,GACPC,QAAQC,IAAIF,GACZC,QAAQC,IAAIF,EAAKG,KAAKzC,MACtBsB,EAAQoB,KAAKC,MAAML,EAAKG,KAAKzC,KAAK,SAClCgB,EAAW0B,KAAKC,MAAML,EAAKG,KAAKG,SAAS,SACzC1B,EAAWwB,KAAKC,MAAML,EAAKG,KAAKI,SAAW,SAC3CzB,EAAOkB,EAAKR,QAAQ,GAAGgB,cACP,WAEd,QAAQ,GACN,IAA8B,WAAzBR,EAAKR,QAAQ,GAAGW,KACnBT,EAASF,EAAQD,QACjB,MAEF,IAA8B,iBAAzBS,EAAKR,QAAQ,GAAGW,KACnBT,EAASF,EAAQP,cACjB,MACF,IAA8B,YAAzBe,EAAKR,QAAQ,GAAGW,KACnBT,EAASF,EAAQN,SACjB,MACF,IAA8B,SAAzBc,EAAKR,QAAQ,GAAGW,KACnBT,EAASF,EAAQL,MACjB,MACF,IAA8B,SAAzBa,EAAKR,QAAQ,GAAGW,KACnBT,EAASF,EAAQJ,MACjB,MACF,IAA8B,eAAzBY,EAAKR,QAAQ,GAAGW,KACnBT,EAASF,EAAQH,YACjB,MACF,IAA8B,UAAzBW,EAAKR,QAAQ,GAAGW,KACnBT,EAASF,EAAQF,OACjB,MACF,QACEI,EAASF,EAAQD,QAIrBU,QAAQC,IAAIF,EAAKR,QAAQ,GAAGW,MAE9BM,QAQH,CAAClC,IAUJ,OACE,oCACE,yBAAKjB,UAAU,cACb,2CACA,yBAAKA,UAAU,SAEb,0BAAMoD,SAAU,SAACC,GACfA,EAAEC,mBAIF,2BAAOC,KAAK,OAAOC,YAAY,gBAAgBC,SAhBlC,SAACJ,GACtBvC,EAAWuC,EAAEK,OAAOC,QAe6DA,MAAO9C,EAAS+C,aAAa,KACtG,2BAAOL,KAAK,OAAOC,YAAY,aAAaC,SApBlC,SAACJ,GACnBzC,EAAQyC,EAAEK,OAAOC,QAmB0DA,MAAOhD,EAAMiD,aAAa,KAC7F,4BAAQC,QAAS,SAACR,GAEhBnC,EAAa,CAAEH,MAAOJ,EAAMK,SAAUH,KAIrCb,UAAU,OANb,YAWJ,kBAAC,EAAD,CAASE,MAAOe,EAAWF,MAAOd,MAAOgB,EAAWD,SAAUb,SAAUgC,EAAO/B,KAAM,CAAEC,EAAGoB,EAAMnB,EAAGa,EAASZ,EAAGc,EAASb,EAAGe,KACvH,0DC9GZuC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.a2a8c028.chunk.js","sourcesContent":["import React from 'react'\nimport './Weather.css'\nimport 'weather-icons/css/weather-icons.css'\nconst Weather = (props)=>{\n    return(\n        <React.Fragment>\n            <div className=\"temp\">\n                <div>\n                <h1>{props.name2}, {props.name1}</h1>\n                    </div>\n                <h1>\n                    <i className={props.weatherx}></i>\n                </h1>\n                <div >\n                    <h1>{props.temp.x}&deg;c</h1>\n                </div>\n                <div className=\"max-min\" >\n    <h1>{props.temp.y}&deg;c</h1>\n    <h1>{props.temp.z}&deg;c</h1>\n                </div>\n                <h3>{props.temp.m} </h3>\n                \n            </div>\n\n        </React.Fragment>\n    )\n}\nexport default Weather;","import React, { useState, useEffect } from \"react\";\nimport Weather from './Weather';\nimport 'weather-icons/css/weather-icons.css'\n\n\nimport \"./App.css\";\n\nconst API_KEY = \"7b2c122e394bea992e54a4df75c1490d\";\n\nconst App = () => {\n  const [city, setCity] = useState('Delhi');\n  const [country, setCountry] = useState('India');\n  const [updatedLoc, setUpdateLoc] = useState({ cityx: city, countryx: country });\n  const [maxTemp, setMaxTemp] = useState(\"Max\");\n  const [minTemp, setMinTemp] = useState(\"Min\");\n  const [dec, setDec] = useState();\n  const [Temp, setTemp] = useState();\n  const [weather, setWeather] = useState({\n    Thunderstorm: 'wi wi-thunderstorm',\n    Drizzle: 'wi wi-sleet',\n    Rain: 'wi wi-storm-showers',\n    Snow: \"wi wi-snow\",\n    Atmosphere: \"wi wi-fog\",\n    Clear: 'wi wi-day-sunny',\n    Clouds: \"wi wi-day-fog\"\n    \n  });\n  const [icons, setIcons] = useState()\n\n\n  useEffect(() => {\n     fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city, country}&appid=${API_KEY}`)\n      .then((res) => {\n        return res.json()\n      }).then((data) => {\n        console.log(data)\n        console.log(data.main.temp);\n        setTemp(Math.floor(data.main.temp-237.15));\n        setMaxTemp(Math.floor(data.main.temp_max-273.15));\n        setMinTemp(Math.floor(data.main.temp_min - 273.15));\n        setDec(data.weather[0].description)\n        const getIcon = () => {\n\n          switch (true) {\n            case data.weather[0].main === \"Clouds\":\n              setIcons(weather.Clouds);\n              break;\n\n            case data.weather[0].main === \"Thunderstorm\":\n              setIcons(weather.Thunderstorm);\n              break;\n            case data.weather[0].main === \"Drizzle\":\n              setIcons(weather.Drizzle);\n              break;\n            case data.weather[0].main === \"Rain\":\n              setIcons(weather.Rain);\n              break;\n            case data.weather[0].main === \"Snow\":\n              setIcons(weather.Snow);\n              break;\n            case data.weather[0].main === \"Atmosphere\":\n              setIcons(weather.Atmosphere);\n              break;\n            case data.weather[0].main === \"Clear\":\n              setIcons(weather.Clear);\n              break;\n            default:\n              setIcons(weather.Clouds);\n              break;\n\n          }\n          console.log(data.weather[0].main);\n        }\n        getIcon();\n\n\n\n\n      })\n\n\n  }, [updatedLoc]);\n\n  const cityHandler = (e) => {\n    setCity(e.target.value);\n  }\n  const countryHandler = (e) => {\n    setCountry(e.target.value);\n  }\n\n\n  return (\n    <>\n      <div className=\"App-header\">\n        <h1>Weather App</h1>\n        <div className=\"forms\">\n\n          <form onSubmit={(e) => {\n            e.preventDefault();\n          }}>\n\n\n            <input type=\"text\" placeholder=\"Enter country\" onChange={countryHandler} value={country} defaultValue='' />\n            <input type=\"text\" placeholder=\"Enter City\" onChange={cityHandler} value={city} defaultValue='' />\n            <button onClick={(e) => {\n\n              setUpdateLoc({ cityx: city, countryx: country });\n\n\n\n            }} className=\"btn\">\n              search\n          </button>\n          </form>\n        </div>\n        <Weather name1={updatedLoc.cityx} name2={updatedLoc.countryx} weatherx={icons} temp={{ x: Temp, y: maxTemp, z: minTemp, m: dec }} />\n            <span>Developer|codebloded</span>\n      </div>\n          \n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}